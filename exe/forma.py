# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'forma.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from tkinter import *
from tkinter import messagebox
from tkinter.messagebox import *

hod_igroka = True
vozmozhnost_belih_shodit = False
vozmozhnost_chernih_shodit = False
white_count = 16
black_count = 16
vozm_b_zabrat_vverh = False
vozm_b_zabrat_vlevo = False
vozm_b_zabrat_vpravo = False
vozm_b_zabrat = False
vozm_b_d_zabrat_vverh = False
vozm_b_d_zabrat_vniz = False
vozm_b_d_zabrat_vlevo = False
vozm_b_d_zabrat_vpravo = False
vozm_b_d_zabrat = False
vozm_ch_zabrat_vniz = False
vozm_ch_zabrat_vlevo = False
vozm_ch_zabrat_vpravo = False
vozm_ch_zabrat = False
vozm_ch_d_zabrat_vverh = False
vozm_ch_d_zabrat_vniz = False
vozm_ch_d_zabrat_vlevo = False
vozm_ch_d_zabrat_vpravo = False
vozm_ch_d_zabrat = False
AI = False


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(420, 238)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(150, 20, 135, 41))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(150, 80, 135, 41))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_2.setInputMask("")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setCursorPosition(0)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout_2.addWidget(self.lineEdit_2)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(140, 140, 160, 56))
        self.widget.setObjectName("widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_3.addWidget(self.pushButton_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 420, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Login"))
        self.label_2.setText(_translate("MainWindow", "Password"))
        self.pushButton_2.setText(_translate("MainWindow", "Cancel"))
        self.pushButton.setText(_translate("MainWindow", "Login"))
        self.pushButton_3.setText(_translate("MainWindow", "Register"))

        self.pushButton.clicked.connect(self.OpenClick)
        self.pushButton_2.clicked.connect(sys.exit)
        self.pushButton_3.clicked.connect(self.Register)

    def Register (self):
        if len(self.lineEdit.text()) % 2 != 0 or len(self.lineEdit_2.text()) % 2 != 0 or len(self.lineEdit.text()) == 0 or len(self.lineEdit_2.text()) == 0:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('Enter the password and login consisting of an even number of characters, but at least 2 symbols')
            msg.setWindowTitle("Error")
            msg.exec_()
        else:
            code = self.lineEdit.text()
            shifr = []

            #firstkey = "ABROK"
            #secondkey = "MODEL"

            A1 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                  'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                  'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                  'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                  'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                  'w', 'x', 'y', 'z', '1', '2', '3', '4',
                  '5', '6', '7', '8', '9', '0', '-', '_']

            A, B, C, D = [], [], [], []

            for i in range(8):
                A.append([0] * 8)
                B.append([0] * 8)
                C.append([0] * 8)
                D.append([0] * 8)

            n = 0
            for i in range(8):
                for j in range(8):
                    A[i][j] = A1[n]
                    n += 1
            D = A

            B1 = ['B', 'U', 'j', 't', '2', '5', '0', '-',
                  'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                  'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
                  'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
                  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
                  'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                  'r', 's', 'u', 'v', 'w', 'x', 'y', 'z',
                  '1', '3', '4', '6', '7', '8', '9', '_', ]

            n1 = 0
            for i in range(8):
                for j in range(8):
                    B[i][j] = B1[n1]
                    n1 += 1

            C1 = ['O', 'Q', 'r', 'x', 'B', '_', '0', '7',
                  'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                  'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S',
                  'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',
                  'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                  's', 't', 'u', 'v', 'w', 'y', 'z', '1',
                  '2', '3', '4', '5', '6', '8', '9', '-']

            n2 = 0
            for i in range(8):
                for j in range(8):
                    C[i][j] = C1[n2]
                    n2 += 1
            for b in range(0, len(code), 2):
                bukva1 = code[b]
                bukva2 = code[b + 1]
                for i in range(8):
                    for j in range(8):
                        if A[i][j] == bukva1:
                            for s in range(8):
                                for t in range(8):
                                    if D[s][t] == bukva2:
                                        shifr.append(B[i][t])
                                        shifr.append(C[s][j])
            s = ''.join(map(str, shifr))

            file1 = open("forform.txt", 'r')
            f = file1.readlines()
            n = 0
            for i in f:
                if i.strip() == s:
                    n += 1
            file1.close()
            if n != 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Error")
                msg.setInformativeText('You are already registered. Please, try to Login')
                msg.setWindowTitle("Error")
                msg.exec_()
            else:
                file1 = open("forform.txt", 'a')
                file1.write(s + '\n')
                file1.close()

                code = self.lineEdit_2.text()
                shifr = []

                # firstkey = "ABROK"
                # secondkey = "MODEL"

                A1 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                      'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                      'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                      'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                      'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                      'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                      'w', 'x', 'y', 'z', '1', '2', '3', '4',
                      '5', '6', '7', '8', '9', '0', '-', '_']

                A, B, C, D = [], [], [], []

                for i in range(8):
                    A.append([0] * 8)
                    B.append([0] * 8)
                    C.append([0] * 8)
                    D.append([0] * 8)

                n = 0
                for i in range(8):
                    for j in range(8):
                        A[i][j] = A1[n]
                        n += 1
                D = A

                B1 = ['B', 'U', 'j', 't', '2', '5', '0', '-',
                      'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                      'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
                      'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
                      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
                      'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                      'r', 's', 'u', 'v', 'w', 'x', 'y', 'z',
                      '1', '3', '4', '6', '7', '8', '9', '_', ]

                n1 = 0
                for i in range(8):
                    for j in range(8):
                        B[i][j] = B1[n1]
                        n1 += 1

                C1 = ['O', 'Q', 'r', 'x', 'B', '_', '0', '7',
                      'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                      'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S',
                      'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',
                      'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                      'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                      's', 't', 'u', 'v', 'w', 'y', 'z', '1',
                      '2', '3', '4', '5', '6', '8', '9', '-']

                n2 = 0
                for i in range(8):
                    for j in range(8):
                        C[i][j] = C1[n2]
                        n2 += 1
                for b in range(0, len(code), 2):
                    bukva1 = code[b]
                    bukva2 = code[b + 1]
                    for i in range(8):
                        for j in range(8):
                            if A[i][j] == bukva1:
                                for s in range(8):
                                    for t in range(8):
                                        if D[s][t] == bukva2:
                                            shifr.append(B[i][t])
                                            shifr.append(C[s][j])
                y = ''.join(map(str, shifr))
                file2 = open("forform1.txt", 'a')
                file2.write(y + '\n')
                file2.close()
                Form.show()
                MainWindow.close()

    def OpenClick (self):
        if len(self.lineEdit.text()) % 2 != 0 or len(self.lineEdit_2.text()) % 2 != 0 or len(self.lineEdit.text()) == 0 or len(self.lineEdit_2.text()) == 0:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('Enter the password and login consisting of an even number of characters, but at least 2 symbols')
            msg.setWindowTitle("Error")
            msg.exec_()
        else:
            code = self.lineEdit.text()
            shifr = []

            # firstkey = "ABROK"
            # secondkey = "MODEL"

            A1 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                  'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                  'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                  'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                  'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                  'w', 'x', 'y', 'z', '1', '2', '3', '4',
                  '5', '6', '7', '8', '9', '0', '-', '_']

            A, B, C, D = [], [], [], []

            for i in range(8):
                A.append([0] * 8)
                B.append([0] * 8)
                C.append([0] * 8)
                D.append([0] * 8)

            n = 0
            for i in range(8):
                for j in range(8):
                    A[i][j] = A1[n]
                    n += 1
            D = A

            B1 = ['B', 'U', 'j', 't', '2', '5', '0', '-',
                  'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                  'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
                  'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
                  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
                  'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                  'r', 's', 'u', 'v', 'w', 'x', 'y', 'z',
                  '1', '3', '4', '6', '7', '8', '9', '_', ]

            n1 = 0
            for i in range(8):
                for j in range(8):
                    B[i][j] = B1[n1]
                    n1 += 1

            C1 = ['O', 'Q', 'r', 'x', 'B', '_', '0', '7',
                  'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                  'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S',
                  'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',
                  'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                  's', 't', 'u', 'v', 'w', 'y', 'z', '1',
                  '2', '3', '4', '5', '6', '8', '9', '-']

            n2 = 0
            for i in range(8):
                for j in range(8):
                    C[i][j] = C1[n2]
                    n2 += 1
            for b in range(0, len(code), 2):
                bukva1 = code[b]
                bukva2 = code[b + 1]
                for i in range(8):
                    for j in range(8):
                        if A[i][j] == bukva1:
                            for s in range(8):
                                for t in range(8):
                                    if D[s][t] == bukva2:
                                        shifr.append(B[i][t])
                                        shifr.append(C[s][j])
            spline = ''.join(map(str, shifr))

            file1 = open("forform.txt", 'r')
            f = file1.readlines()
            k = 0
            num = 0
            for i in f:
                if i.strip() == spline:
                    k += 1
                    break
                else:
                    num += 1
            file1.close()

            code = self.lineEdit_2.text()
            deshifr = []

            # firstkey = "ABROK"
            # secondkey = "MODEL"

            A1 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                  'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                  'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                  'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                  'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                  'w', 'x', 'y', 'z', '1', '2', '3', '4',
                  '5', '6', '7', '8', '9', '0', '-', '_']

            A, B, C, D = [], [], [], []

            for i in range(8):
                A.append([0] * 8)
                B.append([0] * 8)
                C.append([0] * 8)
                D.append([0] * 8)

            n = 0
            for i in range(8):
                for j in range(8):
                    A[i][j] = A1[n]
                    n += 1
            D = A

            B1 = ['B', 'U', 'j', 't', '2', '5', '0', '-',
                  'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                  'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
                  'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
                  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
                  'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                  'r', 's', 'u', 'v', 'w', 'x', 'y', 'z',
                  '1', '3', '4', '6', '7', '8', '9', '_', ]

            n1 = 0
            for i in range(8):
                for j in range(8):
                    B[i][j] = B1[n1]
                    n1 += 1

            C1 = ['O', 'Q', 'r', 'x', 'B', '_', '0', '7',
                  'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                  'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S',
                  'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',
                  'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                  's', 't', 'u', 'v', 'w', 'y', 'z', '1',
                  '2', '3', '4', '5', '6', '8', '9', '-']

            n2 = 0
            for i in range(8):
                for j in range(8):
                    C[i][j] = C1[n2]
                    n2 += 1
            for b in range(0, len(code), 2):
                bukva1 = code[b]
                bukva2 = code[b + 1]
                for i in range(8):
                    for j in range(8):
                        if A[i][j] == bukva1:
                            for s in range(8):
                                for t in range(8):
                                    if D[s][t] == bukva2:
                                        deshifr.append(B[i][t])
                                        deshifr.append(C[s][j])
            self.y = ''.join(map(str, deshifr))

            file2 = open("forform1.txt", 'r')
            d = file2.readlines()
            file2.close()
            if k > 0:
                if d[num].strip() == self.y:
                    Form.show()
                    MainWindow.close()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error")
                    msg.setInformativeText('Wrong password! Try again')
                    msg.setWindowTitle("Error")
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Error")
                msg.setInformativeText('You are not registered. Please, try to Register')
                msg.setWindowTitle("Error")
                msg.exec_()

class Ui_Form(Ui_MainWindow):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(403, 212)
        self.layoutWidget = QtWidgets.QWidget(Form)
        self.layoutWidget.setGeometry(QtCore.QRect(100, 20, 221, 111))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_2.addWidget(self.lineEdit)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.layoutWidget1 = QtWidgets.QWidget(Form)
        self.layoutWidget1.setGeometry(QtCore.QRect(110, 140, 201, 31))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(160, 180, 101, 23))
        self.pushButton_3.setObjectName("pushButton_3")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Enter the text to be encrypted"))
        self.label_2.setText(_translate("Form", "Encrypted text"))
        self.pushButton.setText(_translate("Form", "Encrypt"))
        self.pushButton_2.setText(_translate("Form", "Go to decipher"))
        self.pushButton_3.setText(_translate("Form", "Play"))

        self.pushButton.clicked.connect(self.OpenClick1)
        self.pushButton_2.clicked.connect(self.np)
        self.pushButton_3.clicked.connect(self.play)

    def play(self):
        import time
        import random

        tk = Tk()  # Создаём окно
        tk.title('Турецкие шашки')  # Заголовок окна
        board = Canvas(tk, width=1195, height=795, bg='#FFFFFF')
        tk.resizable(width=False, height=False)
        board.pack()
        app_running = True
        tk.update()
        def izobrazheniya_figur():  # загружаем изображения фигур
            global figuri
            i1 = PhotoImage(file="res\\White.gif")
            i2 = PhotoImage(file="res\\Black.gif")
            i3 = PhotoImage(file="res\\WhiteDamka.gif")
            i4 = PhotoImage(file="res\\BlackDamka.gif")
            figuri = [0, i1, i2, i3, i4]

        def novaya_igra():  # начинаем новую игру
            global pole

            pole = [[0, 0, 0, 0, 0, 0, 0, 0],
                    [2, 2, 2, 2, 2, 2, 2, 2],
                    [2, 2, 2, 2, 2, 2, 2, 2],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0]]

        def Start_new():
            global white_count
            global black_count
            global hod_igroka
            if askyesno("Игра закончена", "Хотите начать новую?"):
                novaya_igra()
                vivod(-1, -1)
                hod_igroka = True
                white_count = 16
                black_count = 16

        def button_press1():
            global AI
            if AI == False:
                AI = True
            else:
                AI = False
            vivod(-1, -1)

        def vivod(x_poz_1, y_poz_1):  # рисуем игровое поле
            global figuri
            global pole
            k = 100
            x = 0
            board.delete('all')
            b1 = Button(tk, text="Вкл/Выкл ИИ", command=button_press1)
            b1.place(x=925, y=300, width=120, height=50)
            while x < 8 * k:  # рисуем доску
                y = k
                while y < 8 * k:
                    board.create_rectangle(x, y, x + k, y + k, fill="#deb887")
                    y += k
                x += k
            x = 0
            while x < 8 * k:  # рисуем доску
                y = 0
                while y < 8 * k:
                    board.create_rectangle(x, y, x + k, y + k, fill="#deb887")
                    y += k
                x += k

            for y in range(8):  # рисуем стоячие пешки
                for x in range(8):
                    z = pole[y][x]
                    if z:
                        if (x_poz_1, y_poz_1) != (x, y):  # стоячие пешки?
                            board.create_image(x * k, y * k, anchor=NW, image=figuri[z])

        def vozmozhnost_belih_hodit(x,
                                    y):  # метод, проверяющий белые шашки на доступность хода(что им ничего не преграждает путь)
            global vozmozhnost_belih_shodit
            global prev_b_coord_x
            global prev_b_coord_y
            if pole[x][y] == 1:  # для белой не дамки
                if (pole[x - 1][y] == 0 and x > 0) or (y < 7 and pole[x][y + 1] == 0) or (
                        pole[x][y - 1] == 0 and y > 0):
                    vozmozhnost_belih_shodit = True
                else:
                    vozmozhnost_belih_shodit = False
                prev_b_coord_x = x
                prev_b_coord_y = y
            elif pole[x][y] == 3:  # для белой дамки
                if (x > 0 and pole[x - 1][y] == 0) or (x < 7 and pole[x + 1][y] == 0) or (
                        y < 7 and pole[x][y + 1] == 0) or (
                        pole[x][y - 1] == 0 and y > 0):
                    vozmozhnost_belih_shodit = True
                else:
                    vozmozhnost_belih_shodit = False
                prev_b_coord_x = x
                prev_b_coord_y = y

        def vozmozhnost_chernih_hodit(x,
                                      y):  # метод, проверяющий черные шашки на доступность хода(что им ничего не преграждает путь)
            global vozmozhnost_chernih_shodit
            global prev_ch_coord_x
            global prev_ch_coord_y

            if pole[x][y] == 2:  # для черной не дамки
                if (pole[x + 1][y] == 0 and x < 7) or (y < 7 and pole[x][y + 1] == 0) or (
                        pole[x][y - 1] == 0 and y > 0):
                    vozmozhnost_chernih_shodit = True
                else:
                    vozmozhnost_chernih_shodit = False
                prev_ch_coord_x = x
                prev_ch_coord_y = y
            elif pole[x][y] == 4:  # для черной дамки
                if (x > 0 and pole[x - 1][y] == 0) or (x < 7 and pole[x + 1][y] == 0) or (
                        y < 7 and pole[x][y + 1] == 0) or (
                        pole[x][y - 1] == 0 and y > 0):
                    vozmozhnost_chernih_shodit = True
                else:
                    vozmozhnost_chernih_shodit = False
                prev_ch_coord_x = x
                prev_ch_coord_y = y

        def belie_proverka():
            global vozm_b_zabrat_vverh
            global vozm_b_zabrat_vlevo
            global vozm_b_zabrat_vpravo
            global vozm_b_zabrat
            global vozm_b_d_zabrat_vverh
            global vozm_b_d_zabrat_vniz
            global vozm_b_d_zabrat_vlevo
            global vozm_b_d_zabrat_vpravo
            global vozm_b_d_zabrat

            for i in range(8):  # ищем на поле возможность случая забирания
                for j in range(8):
                    if (pole[i][j] == 1 and i > 1) and (pole[i - 1][j] == 2 or pole[i - 1][j] == 4) and pole[i - 2][
                        j] == 0:  # для белой шашки вверх
                        vozm_b_zabrat_vverh = True
                        vozm_b_zabrat = True

                    if (pole[i][j] == 1 and j > 1) and (pole[i][j - 1] == 2 or pole[i][j - 1] == 4) and pole[i][
                        j - 2] == 0:  # для белой шашки влево
                        vozm_b_zabrat_vlevo = True
                        vozm_b_zabrat = True

                    if (pole[i][j] == 1 and j < 6) and (pole[i][j + 1] == 2 or pole[i][j + 1] == 4) and pole[i][
                        j + 2] == 0:  # для белой шашки вправо
                        vozm_b_zabrat = True
                        vozm_b_zabrat_vpravo = True

                    if i > 1 and pole[i][j] == 3:  # для белой дамки вверх
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            count = 0
                            if pole[k][j] == 0 and (
                                    (k < 7 and pole[k + 1][j] == 2) or (k < 7 and pole[k + 1][j] == 4)) and (
                                    k < 6 and pole[k + 2][j] == 0 or k < 6 and pole[k + 2][j] == 3):
                                while pole[k][j] != 3:
                                    if j < 7 and pole[i][j + 1] == 3:
                                        vozm_b_d_zabrat_vlevo = True
                                        vozm_b_d_zabrat = True
                                        break
                                    ch_count += 1
                                    if k < 7:
                                        k += 1
                                    else:
                                        break
                                    if pole[k][j] == 0:
                                        zero_count += 1
                                    if pole[k][j] == 2 or pole[k][j] == 4 and j > 0:
                                        count += 1
                                    if count == 2:
                                        break
                                    if zero_count == ch_count - 2 and pole[k][j] == 3 and k > 0:
                                        vozm_b_d_zabrat_vverh = True
                                        vozm_b_d_zabrat = True
                                    else:
                                        vozm_b_d_zabrat_vverh = False
                                break

                    if i < 7 and pole[i][j] == 3:  # для белой дамки вниз
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            if pole[k][j] == 0 and ((k > 1 and pole[k - 1][j] == 2) or (k > 1 and pole[k - 1][j] == 4)):
                                while pole[k][j] != 3:
                                    ch_count += 1
                                    k -= 1
                                    if pole[k][j] == 0:
                                        zero_count += 1
                                    if zero_count == ch_count - 2 and pole[k][j] == 3 and k < 7:
                                        vozm_b_d_zabrat_vniz = True
                                        vozm_b_d_zabrat = True
                                    else:
                                        vozm_b_d_zabrat_vniz = False
                                break

                    if j > 1 and pole[i][j] == 3:  # для белой дамки влево
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            count = 0
                            if pole[i][k] == 0 and (
                                    (k < 7 and pole[i][k + 1] == 2) or (k < 7 and pole[i][k + 1] == 4)) and (
                                    k < 6 and pole[i][k + 2] == 0 or k < 6 and pole[i][k + 2] == 3):
                                while pole[i][k] != 3:
                                    if i < 7 and pole[i + 1][j] == 3:
                                        vozm_b_d_zabrat_vlevo = True
                                        vozm_b_d_zabrat = True
                                        break
                                    ch_count += 1
                                    if k < 7:
                                        k += 1
                                    else:
                                        break
                                    if pole[i][k] == 0:
                                        zero_count += 1
                                    if pole[i][k] == 2 or pole[i][k] == 4 and k > 0:
                                        count += 1
                                    if count == 2:
                                        break
                                    if zero_count == ch_count - 2 and pole[i][k] == 3:
                                        vozm_b_d_zabrat_vlevo = True
                                        vozm_b_d_zabrat = True
                                    elif vozm_b_d_zabrat_vlevo != True:
                                        vozm_b_d_zabrat_vlevo = False

                    if j < 7 and pole[i][j] == 3:  # для белой дамки вправо
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            if pole[i][k] == 0 and ((k > 1 and pole[i][k - 1] == 2) or (k > 1 and pole[i][k - 1] == 4)):
                                while pole[i][k] != 3:
                                    ch_count += 1
                                    k -= 1
                                    if pole[i][k] == 0:
                                        zero_count += 1
                                    if zero_count == ch_count - 2 and pole[i][k] == 3 and k < 7:
                                        vozm_b_d_zabrat_vpravo = True
                                        vozm_b_d_zabrat = True
                                    else:
                                        vozm_b_zabrat_vpravo = False
                                break

        def chernie_proverka():  # аналогично с тем что выше
            global vozm_ch_zabrat_vniz
            global vozm_ch_zabrat_vlevo
            global vozm_ch_zabrat_vpravo
            global vozm_ch_zabrat
            global vozm_ch_d_zabrat_vverh
            global vozm_ch_d_zabrat_vniz
            global vozm_ch_d_zabrat_vlevo
            global vozm_ch_d_zabrat_vpravo
            global vozm_ch_d_zabrat

            for i in range(8):
                for j in range(8):
                    if (pole[i][j] == 2 and i < 6) and (pole[i + 1][j] == 1 or pole[i + 1][j] == 3) and pole[i + 2][
                        j] == 0:
                        vozm_ch_zabrat_vniz = True
                        vozm_ch_zabrat = True
                    if (pole[i][j] == 2 and j > 1) and (pole[i][j - 1] == 1 or pole[i][j - 1] == 3) and pole[i][
                        j - 2] == 0:
                        vozm_ch_zabrat_vlevo = True
                        vozm_ch_zabrat = True
                    if (pole[i][j] == 2 and j < 6) and (pole[i][j + 1] == 1 or pole[i][j + 1] == 3) and pole[i][
                        j + 2] == 0:
                        vozm_ch_zabrat = True
                        vozm_ch_zabrat_vpravo = True

                    if i > 1 and pole[i][j] == 4:
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            count = 0
                            if pole[k][j] == 0 and (
                                    (k < 7 and pole[k + 1][j] == 1) or (k < 7 and pole[k + 1][j] == 3)) and (
                                    k < 6 and pole[k + 2][j] == 0 or k < 6 and pole[k + 2][j] == 4):
                                while pole[k][j] != 4:
                                    if i < 7 and pole[i + 1][j] == 4:
                                        vozm_ch_d_zabrat_vlevo = True
                                        vozm_ch_d_zabrat = True
                                        break
                                    ch_count += 1
                                    if k < 7:
                                        k += 1
                                    else:
                                        break
                                    if pole[k][j] == 0:
                                        zero_count += 1
                                    if pole[k][j] == 1 or pole[k][j] == 3:
                                        count += 1
                                    if count == 2:
                                        break
                                    if zero_count == ch_count - 2 and pole[k][j] == 4:
                                        vozm_ch_d_zabrat_vverh = True
                                        vozm_ch_d_zabrat = True
                                    else:
                                        vozm_ch_d_zabrat_vverh = False

                    if i < 7 and pole[i][j] == 4:
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            if pole[k][j] == 0 and ((k > 1 and pole[k - 1][j] == 1) or (k > 1 and pole[k - 1][j] == 3)):
                                while pole[k][j] != 4:
                                    ch_count += 1
                                    k -= 1
                                    if pole[k][j] == 0:
                                        zero_count += 1
                                    if zero_count == ch_count - 2 and pole[k][j] == 4:
                                        vozm_ch_d_zabrat_vniz = True
                                        vozm_ch_d_zabrat = True
                                    else:
                                        vozm_ch_d_zabrat_vniz = False
                                break

                    if j > 1 and pole[i][j] == 4:
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            count = 0
                            if pole[i][k] == 0 and (
                                    (k < 7 and pole[i][k + 1] == 1) or (k < 7 and pole[i][k + 1] == 3)) and (
                                    k < 6 and pole[i][k + 2] == 0 or k < 6 and pole[i][k + 2] == 4):
                                while pole[i][k] != 4:
                                    if j < 7 and pole[i][j + 1] == 4:
                                        vozm_ch_d_zabrat_vlevo = True
                                        vozm_ch_d_zabrat = True
                                        break
                                    ch_count += 1
                                    if k < 7:
                                        k += 1
                                    else:
                                        break
                                    if pole[i][k] == 0:
                                        zero_count += 1
                                    if pole[i][k] == 1 or pole[i][k] == 3:
                                        count += 1
                                    if count == 2:
                                        break
                                    if zero_count == ch_count - 2 and pole[i][k] == 4:
                                        vozm_ch_d_zabrat_vlevo = True
                                        vozm_ch_d_zabrat = True
                                    elif vozm_ch_d_zabrat_vlevo != True:
                                        vozm_ch_d_zabrat_vlevo = False

                    if j < 7 and pole[i][j] == 4:
                        for k in range(8):
                            zero_count = 0
                            ch_count = 0
                            if pole[i][k] == 0 and ((k > 1 and pole[i][k - 1] == 1) or (k > 1 and pole[i][k - 1] == 3)):
                                while pole[i][k] != 4:
                                    ch_count += 1
                                    k -= 1
                                    if pole[i][k] == 0:
                                        zero_count += 1
                                    if zero_count == ch_count - 2 and pole[i][k] == 4:
                                        vozm_ch_d_zabrat_vpravo = True
                                        vozm_ch_d_zabrat = True
                                    else:
                                        vozm_ch_zabrat_vpravo = False
                                break

        def AI_hod():
            global hod_igroka
            global vozmozhnost_chernih_shodit
            global xx, yy, kk, jj, ii
            global vozm_ch_zabrat
            global black_count
            global white_count
            global vozm_ch_d_zabrat
            global vozm_ch_d_zabrat_vverh
            global vozm_ch_d_zabrat_vniz
            global vozm_ch_d_zabrat_vpravo
            global vozm_ch_d_zabrat_vlevo

            if AI:
                if black_count == 0:
                    messagebox.showinfo(title='Победа белых', message='Победили белые.', icon='info')
                    hod_igroka = None
                    Start_new()

                vozm = True
                vozm_ch_zabrat = False
                vozm_ch_d_zabrat = False
                chernie_proverka()
                vozmozhnost_chernih_shodit = False
                pr_x = 0
                pr_y = 0
                xx, yy = 0, 0
                if vozm_ch_zabrat or vozm_ch_d_zabrat:
                    vozm = False
                else:
                    vozm = True
                while vozmozhnost_chernih_shodit != True:
                    c = 0
                    l = random.randint(1, str(pole).count('2'))
                    for i in range(8):
                        for j in range(8):
                            if pole[i][j] == 2 and c != l:
                                c += 1
                                if c == l:
                                    pr_x = i
                                    pr_y = j
                                    vozmozhnost_chernih_hodit(i, j)

                    chernie_proverka()
                    if vozmozhnost_chernih_shodit and vozm_ch_zabrat == False and vozm_ch_d_zabrat == False and vozm:
                        chernie_proverka()
                        if pr_y < 7 and pole[pr_x][pr_y + 1] == 0 and pole[pr_x][
                            pr_y] == 2 and vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                            pole[pr_x][pr_y] = 0
                            pole[pr_x][pr_y + 1] = 2
                            xx = pr_x
                            yy = pr_y + 1
                        elif pr_y > 0 and pole[pr_x][pr_y - 1] == 0 and pole[pr_x][
                            pr_y] == 2 and vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                            pole[pr_x][pr_y] = 0
                            pole[pr_x][pr_y - 1] = 2
                            xx = pr_x
                            yy = pr_y - 1
                        elif pr_x < 7 and pole[pr_x + 1][pr_y] == 0 and pole[pr_x][
                            pr_y] == 2 and vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                            pole[pr_x][pr_y] = 0
                            if pr_x == 6:
                                pole[pr_x + 1][pr_y] = 4
                            else:
                                pole[pr_x + 1][pr_y] = 2
                            xx = pr_x + 1
                            yy = pr_y
                        vivod(-1, -1)
                        vozmozhnost_chernih_shodit = False
                        hod_igroka = True
                        break
                    chernie_proverka()
                    if vozm_ch_d_zabrat:
                        chernie_proverka()
                        if vozm_ch_d_zabrat_vverh:
                            for i in range(8):
                                for j in range(8):
                                    if i > 1 and pole[i][j] == 4:
                                        for k in range(8):
                                            zero_count = 0
                                            ch_count = 0
                                            count = 0
                                            if pole[k][j] == 0 and ((k < 7 and pole[k + 1][j] == 1) or (
                                                    k < 7 and pole[k + 1][j] == 3)) and (
                                                    k < 6 and pole[k + 2][j] == 0 or k < 6 and pole[k + 2][j] == 4):
                                                while pole[k][j] != 4:
                                                    if i < 7 and pole[i + 1][j] == 4:
                                                        pole[i + 1][j] = 0
                                                        pole[i][j] = 0
                                                        pole[i - 1][j] = 4
                                                        white_count -= 1
                                                        vivod(-1, -1)
                                                        hod_igroka = True
                                                        chernie_proverka()
                                                        break
                                                    ch_count += 1
                                                    if k < 7:
                                                        k += 1
                                                    else:
                                                        break
                                                    if pole[k][j] == 0:
                                                        zero_count += 1
                                                    if pole[k][j] == 1 or pole[k][j] == 3:
                                                        count += 1
                                                        kk = k
                                                        jj = j
                                                    if count == 2:
                                                        break
                                                    if zero_count == ch_count - 2 and pole[k][j] == 4:
                                                        pole[k][j] = 0
                                                        pole[kk][jj] = 0
                                                        pole[kk - 1][jj] = 4
                                                        white_count -= 1
                                                        vivod(-1, -1)
                                                        hod_igroka = True
                                                        chernie_proverka()
                                                        break
                        chernie_proverka()
                        if vozm_ch_d_zabrat_vniz:
                            for i in range(8):
                                for j in range(8):
                                    if i < 7 and pole[i][j] == 4:
                                        for k in range(8):
                                            zero_count = 0
                                            ch_count = 0
                                            if pole[k][j] == 0 and (
                                                    (k > 1 and pole[k - 1][j] == 1) or (k > 1 and pole[k - 1][j] == 3)):
                                                while pole[k][j] != 4:
                                                    ch_count += 1
                                                    k -= 1
                                                    if pole[k][j] == 0:
                                                        zero_count += 1
                                                    if pole[k][j] == 1 or pole[k][j] == 3:
                                                        kk = k
                                                        jj = j
                                                    if zero_count == ch_count - 2 and pole[k][j] == 4:
                                                        pole[k][j] = 0
                                                        pole[kk][jj] = 0
                                                        pole[kk + 1][jj] = 4
                                                        white_count -= 1
                                                        vivod(-1, -1)
                                                        hod_igroka = True
                                                        chernie_proverka()
                                                        break
                        chernie_proverka()
                        if vozm_ch_d_zabrat_vlevo:
                            for i in range(8):
                                for j in range(8):
                                    if j > 1 and pole[i][j] == 4:
                                        for k in range(8):
                                            zero_count = 0
                                            ch_count = 0
                                            count = 0
                                            if pole[i][k] == 0 and (
                                                    (k < 7 and pole[i][k + 1] == 1) or (
                                                    k < 7 and pole[i][k + 1] == 3)) and (
                                                    k < 6 and pole[i][k + 2] == 0 or k < 6 and pole[i][k + 2] == 4):
                                                while pole[i][k] != 4:
                                                    if j < 7 and pole[i][j + 1] == 4:
                                                        pole[i][j + 1] = 0
                                                        pole[i][j] = 0
                                                        pole[i][j - 1] = 4
                                                        white_count -= 1
                                                        vivod(-1, -1)
                                                        hod_igroka = True
                                                        chernie_proverka()
                                                        break
                                                    ch_count += 1
                                                    if k < 7:
                                                        k += 1
                                                    else:
                                                        break
                                                    if pole[i][k] == 0:
                                                        zero_count += 1
                                                    if pole[i][k] == 1 or pole[i][k] == 3:
                                                        kk = k
                                                        ii = i
                                                        count += 1
                                                    if count == 2:
                                                        break
                                                    if zero_count == ch_count - 2 and pole[i][k] == 4:
                                                        pole[i][k] = 0
                                                        pole[ii][kk] = 0
                                                        pole[ii][kk - 1] = 4
                                                        white_count -= 1
                                                        vivod(-1, -1)
                                                        hod_igroka = True
                                                        chernie_proverka()
                                                        break
                        chernie_proverka()
                        if vozm_ch_d_zabrat_vpravo:
                            for i in range(8):
                                for j in range(8):
                                    if j < 7 and pole[i][j] == 4:
                                        for k in range(8):
                                            zero_count = 0
                                            ch_count = 0
                                            if pole[i][k] == 0 and (
                                                    (k > 1 and pole[i][k - 1] == 1) or (k > 1 and pole[i][k - 1] == 3)):
                                                while pole[i][k] != 4:
                                                    ch_count += 1
                                                    k -= 1
                                                    if pole[i][k] == 0:
                                                        zero_count += 1
                                                    if pole[i][k] == 1 or pole[i][k] == 3:
                                                        kk = k
                                                        ii = i
                                                    if zero_count == ch_count - 2 and pole[i][k] == 4:
                                                        pole[i][k] = 0
                                                        pole[ii][kk] = 0
                                                        pole[ii][kk + 1] = 4
                                                        white_count -= 1
                                                        vivod(-1, -1)
                                                        hod_igroka = True
                                                        chernie_proverka()
                                                        break
                        if vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                            hod_igroka = True
                            vivod(-1, -1)
                            break
                        vozm_ch_d_zabrat = False
                        chernie_proverka()
                    if white_count == 0:
                        messagebox.showinfo(title='Победа черных', message='Победили черные.', icon='info')
                        hod_igroka = None
                        Start_new()
                    chernie_proverka()
                    if vozm_ch_zabrat and vozm_ch_d_zabrat == False:
                        if vozm_ch_zabrat_vniz:
                            for i in range(8):
                                for j in range(8):
                                    if (pole[i][j] == 2 and i < 6) and (
                                            pole[i + 1][j] == 1 or pole[i + 1][j] == 3) and pole[i + 2][
                                        j] == 0:
                                        pole[i][j] = 0
                                        pole[i + 1][j] = 0
                                        if i == 5:
                                            pole[i + 2][j] = 4
                                        else:
                                            pole[i + 2][j] = 2
                                        white_count -= 1
                                        vivod(-1, -1)
                                        chernie_proverka()
                                        hod_igroka = True

                        if vozm_ch_zabrat_vlevo:
                            for i in range(8):
                                for j in range(8):
                                    if (pole[i][j] == 2 and j > 1) and (
                                            pole[i][j - 1] == 1 or pole[i][j - 1] == 3) and pole[i][j - 2] == 0:
                                        pole[i][j] = 0
                                        pole[i][j - 1] = 0
                                        pole[i][j - 2] = 2
                                        white_count -= 1
                                        vivod(-1, -1)
                                        chernie_proverka()
                                        hod_igroka = True
                        if vozm_ch_zabrat_vpravo:
                            for i in range(8):
                                for j in range(8):
                                    if (pole[i][j] == 2 and j < 6) and (pole[i][j + 1] == 1 or pole[i][j + 1] == 3) and \
                                            pole[i][
                                                j + 2] == 0:
                                        pole[i][j] = 0
                                        pole[i][j + 1] = 0
                                        pole[i][j + 2] = 2
                                        white_count -= 1
                                        vivod(-1, -1)
                                        chernie_proverka()
                                        hod_igroka = True
                        if white_count == 0:
                            messagebox.showinfo(title='Победа черных', message='Победили черные.', icon='info')
                            hod_igroka = None
                            Start_new()
                        chernie_proverka()
                        if vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                            hod_igroka = True
                            vivod(-1, -1)
                            break

        def click_event(event):
            global hod_igroka
            global white_count
            global black_count
            global vozm_b_zabrat
            global vozm_b_zabrat_vverh
            global vozm_b_zabrat_vlevo
            global vozm_b_zabrat_vpravo
            global vozm_ch_zabrat
            global vozm_ch_zabrat_vniz
            global vozm_ch_zabrat_vlevo
            global vozm_ch_zabrat_vpravo
            global vozmozhnost_chernih_shodit
            global vozm_b_d_zabrat_vverh
            global vozm_b_d_zabrat_vniz
            global vozm_b_d_zabrat_vlevo
            global vozm_b_d_zabrat_vpravo
            global vozm_b_d_zabrat
            global vozm_ch_d_zabrat_vverh
            global vozm_ch_d_zabrat_vniz
            global vozm_ch_d_zabrat_vlevo
            global vozm_ch_d_zabrat_vpravo
            global vozm_ch_d_zabrat
            global prev_b_coord_x
            global prev_b_coord_y
            global prev_ch_coord_x
            global prev_ch_coord_y
            global AI
            if 0 < event.x < 800 and 0 < event.y < 800:  # Если кликнули на доске
                x = event.y // 100  # Определяем строку на которую нажали
                y = event.x // 100  # Определяем столбец на который нажали

            if hod_igroka:  # если ход белых
                if vozm_b_d_zabrat:  # если у белых дамок есть возможность забрать черную шашку
                    if vozm_b_d_zabrat_vverh:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 3 and prev_b_coord_x > 1 and pole[x][
                            y] == 0 and prev_b_coord_y == y:
                            if x < prev_b_coord_x and x < 7 and pole[x + 1][y] == 2 or x < 7 and pole[x + 1][y] == 4:
                                ch_count = 0
                                not_zero_count = 0
                                prev_x = prev_b_coord_x
                                for k in range(prev_b_coord_x, x, -1):  # проверяем все ли клетки на пути пустые
                                    ch_count += 1
                                    if pole[prev_b_coord_x][y] != 0:
                                        not_zero_count += 1
                                    prev_b_coord_x -= 1
                                if not_zero_count == 2:  # если на пути ничего не мешает, то едим
                                    pole[x][y] = 3
                                    pole[prev_x][prev_b_coord_y] = 0
                                    pole[x + 1][y] = 0
                                    black_count -= 1
                                    vivod(-1, -1)

                    if vozm_b_d_zabrat_vniz:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 3 and prev_b_coord_x < 7 and pole[x][
                            y] == 0 and prev_b_coord_y == y:
                            if x > prev_b_coord_x and pole[x - 1][y] == 2 or pole[x - 1][y] == 4:
                                ch_count = 0
                                not_zero_count = 0
                                prev_x = prev_b_coord_x
                                for k in range(x, prev_b_coord_x, -1):
                                    ch_count += 1
                                    if pole[prev_b_coord_x][y] != 0:
                                        not_zero_count += 1
                                    prev_b_coord_x += 1
                                if not_zero_count == 2:
                                    pole[x][y] = 3
                                    pole[prev_x][prev_b_coord_y] = 0
                                    pole[x - 1][y] = 0
                                    black_count -= 1
                                    vivod(-1, -1)

                    if vozm_b_d_zabrat_vlevo:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 3 and prev_b_coord_y > 1 and pole[x][
                            y] == 0 and prev_b_coord_x == x:
                            if y < prev_b_coord_y and y < 7 and pole[x][y + 1] == 2 or y < 7 and pole[x][y + 1] == 4:
                                ch_count = 0
                                not_zero_count = 0
                                prev_y = prev_b_coord_y
                                for k in range(prev_b_coord_y, y, -1):
                                    ch_count += 1
                                    if pole[x][prev_b_coord_y] != 0:
                                        not_zero_count += 1
                                    prev_b_coord_y -= 1
                                if not_zero_count == 2:
                                    pole[x][y] = 3
                                    pole[prev_b_coord_x][prev_y] = 0
                                    pole[x][y + 1] = 0
                                    black_count -= 1
                                    vivod(-1, -1)

                    if vozm_b_d_zabrat_vpravo:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 3 and prev_b_coord_y < 6 and pole[x][
                            y] == 0 and prev_b_coord_x == x:
                            if y > prev_b_coord_y and pole[x][y - 1] == 2 or pole[x][y - 1] == 4:
                                ch_count = 0
                                not_zero_count = 0
                                prev_y = prev_b_coord_y
                                for k in range(y, prev_b_coord_y, -1):
                                    ch_count += 1
                                    if pole[x][prev_b_coord_y] != 0:
                                        not_zero_count += 1
                                    prev_b_coord_y += 1
                                if not_zero_count == 2:
                                    pole[x][y] = 3
                                    pole[prev_b_coord_x][prev_y] = 0
                                    pole[x][y - 1] = 0
                                    black_count -= 1
                                    vivod(-1, -1)

                    vozm_b_d_zabrat = False
                    belie_proverka()
                    if vozm_b_d_zabrat == False:
                        hod_igroka = False
                        if black_count != 0:
                            AI_hod()
                if vozm_b_zabrat:  # если возможность белых не дамок забрать
                    if vozm_b_zabrat_vverh:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 1 and prev_b_coord_x > 1 and (
                                pole[prev_b_coord_x - 1][y] == 2 or pole[prev_b_coord_x - 1][y] == 4) and pole[x][
                            y] == 0 and \
                                pole[x + 2][y] == 1 and prev_b_coord_x == x + 2 and prev_b_coord_y == y:
                            if prev_b_coord_x == 2 and x + 1 == 1 and x == 0:  # если прыгнули на поле, превращающее в дамку
                                pole[x][y] = 3
                            else:
                                pole[x][y] = 1
                            pole[x + 2][y] = 0
                            pole[x + 1][y] = 0
                            black_count -= 1
                            vivod(-1, -1)

                    if vozm_b_zabrat_vlevo:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 1 and prev_b_coord_y > 1 and (
                                pole[prev_b_coord_x][prev_b_coord_y - 1] == 2 or pole[prev_b_coord_x][
                            prev_b_coord_y - 1] == 4) and pole[x][y] == 0 and pole[prev_b_coord_x][
                            prev_b_coord_y - 2] == 0 and prev_b_coord_x == x and prev_b_coord_y == y + 2:
                            pole[prev_b_coord_x][y + 2] = 0
                            pole[x][y + 1] = 0
                            pole[x][y] = 1
                            black_count -= 1
                            vivod(-1, -1)

                    if vozm_b_zabrat_vpravo:
                        if pole[prev_b_coord_x][prev_b_coord_y] == 1 and prev_b_coord_y < 6 and (
                                pole[prev_b_coord_x][prev_b_coord_y + 1] == 2 or pole[prev_b_coord_x][
                            prev_b_coord_y + 1] == 4) and pole[x][y] == 0 and pole[prev_b_coord_x][
                            prev_b_coord_y + 2] == 0 and prev_b_coord_x == x and prev_b_coord_y == y - 2:
                            pole[prev_b_coord_x][y - 2] = 0
                            pole[x][y - 1] = 0
                            pole[x][y] = 1
                            black_count -= 1
                            vivod(-1, -1)
                    vozm_b_zabrat = False

                    belie_proverka()
                    if vozm_b_d_zabrat == False and vozm_b_zabrat == False:
                        hod_igroka = False
                        if black_count != 0:
                            AI_hod()
                belie_proverka()
                vozmozhnost_belih_hodit(x, y)
                if white_count == 0:
                    messagebox.showinfo(title='Победа черных', message='Победили черные.', icon='info')
                    hod_igroka = None
                    Start_new()
                if black_count == 0:
                    messagebox.showinfo(title='Победа белых', message='Победили белые.', icon='info')
                    hod_igroka = None
                    Start_new()
                if vozmozhnost_belih_shodit:  # если выбранная шашка может ходить(ей ничего не преграждает путь)
                    if (pole[prev_b_coord_x][
                            prev_b_coord_y] != 0 and prev_b_coord_y + 1 == y and prev_b_coord_x == x) or (
                            prev_b_coord_y - 1 == y and prev_b_coord_x == x) or (
                            prev_b_coord_x - 1 == x and prev_b_coord_y == y):  # Проверяем, сходили ли мы на одну клетку вертикально или горизонтально
                        if pole[x][
                            y] == 0 and vozm_b_zabrat == False and vozm_b_d_zabrat == False:  # если эта клетка пустая и нету контроля для забирания(поедания)
                            if pole[prev_b_coord_x][prev_b_coord_y] == 1:  # если сходили на поле, превращающее в дамку
                                if x == 0:
                                    pole[x][y] = 3
                                else:
                                    pole[x][y] = 1
                                pole[prev_b_coord_x][prev_b_coord_y] = 0
                                vivod(-1, -1)  # рисуем игровое поле
                                hod_igroka = False
                                if black_count != 0:
                                    AI_hod()

                    if pole[prev_b_coord_x][prev_b_coord_y] == 3 and pole[x][
                        y] == 0 and vozm_b_zabrat == False and vozm_b_d_zabrat == False:  # ходы для белой дамки
                        if prev_b_coord_x > x and prev_b_coord_y == y:
                            ch_count = 0
                            not_zero_count = 0
                            prev_x = prev_b_coord_x
                            for k in range(prev_b_coord_x, x, -1):  # проверка на пустой путь до выбранной клетки
                                ch_count += 1
                                if pole[prev_b_coord_x][y] != 0:
                                    not_zero_count += 1
                                prev_b_coord_x -= 1
                            if not_zero_count == 1:
                                pole[x][y] = 3
                                pole[prev_x][prev_b_coord_y] = 0
                                vivod(-1, -1)
                                hod_igroka = False
                                if black_count != 0:
                                    AI_hod()
                        if prev_b_coord_x < x and prev_b_coord_y == y:
                            ch_count = 0
                            not_zero_count = 0
                            prev_x = prev_b_coord_x
                            for k in range(prev_b_coord_x, x):
                                ch_count += 1
                                if pole[prev_b_coord_x][y] != 0:
                                    not_zero_count += 1
                                prev_b_coord_x += 1
                            if not_zero_count == 1:
                                pole[x][y] = 3
                                pole[prev_x][prev_b_coord_y] = 0
                                vivod(-1, -1)
                                hod_igroka = False
                                if black_count != 0:
                                    AI_hod()
                        if prev_b_coord_y > y and prev_b_coord_x == x:
                            ch_count = 0
                            not_zero_count = 0
                            prev_y = prev_b_coord_y
                            for k in range(prev_b_coord_y, y, -1):
                                ch_count += 1
                                if pole[x][prev_b_coord_y] != 0:
                                    not_zero_count += 1
                                prev_b_coord_y -= 1
                            if not_zero_count == 1:
                                pole[x][y] = 3
                                pole[prev_b_coord_x][prev_y] = 0
                                vivod(-1, -1)
                                hod_igroka = False
                                if black_count != 0:
                                    AI_hod()
                        if prev_b_coord_y < y and prev_b_coord_x == x:
                            ch_count = 0
                            not_zero_count = 0
                            prev_y = prev_b_coord_y
                            for k in range(prev_b_coord_y, y):
                                ch_count += 1
                                if pole[x][prev_b_coord_y] != 0:
                                    not_zero_count += 1
                                prev_b_coord_y += 1
                            if not_zero_count == 1:
                                pole[x][y] = 3
                                pole[prev_b_coord_x][prev_y] = 0
                                vivod(-1, -1)
                                hod_igroka = False
                                if black_count != 0:
                                    AI_hod()

            ##########################################################################################################################
            ##########################################################################################################################
            ##########################################################################################################################

            if not hod_igroka and AI == False:
                if vozm_ch_d_zabrat:
                    if vozm_ch_d_zabrat_vverh:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 4 and prev_ch_coord_x > 1 and pole[x][
                            y] == 0 and prev_ch_coord_y == y:
                            if x < prev_ch_coord_x and x < 7 and pole[x + 1][y] == 1 or x < 7 and pole[x + 1][y] == 3:
                                ch_count = 0
                                not_zero_count = 0
                                prev_x = prev_ch_coord_x
                                for k in range(prev_ch_coord_x, x, -1):
                                    ch_count += 1
                                    if pole[prev_ch_coord_x][y] != 0:
                                        not_zero_count += 1
                                    prev_ch_coord_x -= 1
                                if not_zero_count == 2:
                                    pole[x][y] = 4
                                    pole[prev_x][prev_ch_coord_y] = 0
                                    pole[x + 1][y] = 0
                                    white_count -= 1
                                    vivod(-1, -1)

                    if vozm_ch_d_zabrat_vniz:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 4 and prev_ch_coord_x < 7 and pole[x][
                            y] == 0 and prev_ch_coord_y == y:
                            if x > prev_ch_coord_x and pole[x - 1][y] == 1 or pole[x - 1][y] == 3:
                                ch_count = 0
                                not_zero_count = 0
                                prev_x = prev_ch_coord_x
                                for k in range(x, prev_ch_coord_x, -1):
                                    ch_count += 1
                                    if pole[prev_ch_coord_x][y] != 0:
                                        not_zero_count += 1
                                    prev_ch_coord_x += 1
                                if not_zero_count == 2:
                                    pole[x][y] = 4
                                    pole[prev_x][prev_ch_coord_y] = 0
                                    pole[x - 1][y] = 0
                                    white_count -= 1
                                    vivod(-1, -1)

                    if vozm_ch_d_zabrat_vlevo:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 4 and prev_ch_coord_y > 1 and pole[x][
                            y] == 0 and prev_ch_coord_x == x:
                            if y < prev_ch_coord_y and y < 7 and pole[x][y + 1] == 1 or y < 7 and pole[x][y + 1] == 3:
                                ch_count = 0
                                not_zero_count = 0
                                prev_y = prev_ch_coord_y
                                for k in range(prev_ch_coord_y, y, -1):
                                    ch_count += 1
                                    if pole[x][prev_ch_coord_y] != 0:
                                        not_zero_count += 1
                                    prev_ch_coord_y -= 1
                                if not_zero_count == 2:
                                    pole[x][y] = 4
                                    pole[prev_ch_coord_x][prev_y] = 0
                                    pole[x][y + 1] = 0
                                    white_count -= 1
                                    vivod(-1, -1)

                    if vozm_ch_d_zabrat_vpravo:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 4 and prev_ch_coord_y < 6 and pole[x][
                            y] == 0 and prev_ch_coord_x == x:
                            if y > prev_ch_coord_y and pole[x][y - 1] == 1 or pole[x][y - 1] == 3:
                                ch_count = 0
                                not_zero_count = 0
                                prev_y = prev_ch_coord_y
                                for k in range(y, prev_ch_coord_y, -1):
                                    ch_count += 1
                                    if pole[x][prev_ch_coord_y] != 0:
                                        not_zero_count += 1
                                    prev_ch_coord_y += 1
                                if not_zero_count == 2:
                                    pole[x][y] = 4
                                    pole[prev_ch_coord_x][prev_y] = 0
                                    pole[x][y - 1] = 0
                                    white_count -= 1
                                    vivod(-1, -1)

                    vozm_ch_d_zabrat = False
                    chernie_proverka()
                    if vozm_ch_d_zabrat == False:
                        hod_igroka = True
                if vozm_ch_zabrat:
                    if vozm_ch_zabrat_vniz:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 2 and prev_ch_coord_x < 6 and (
                                pole[prev_ch_coord_x + 1][y] == 1 or pole[prev_ch_coord_x + 1][y] == 3) and pole[x][
                            y] == 0 and \
                                pole[x - 2][y] == 2 and prev_ch_coord_x == x - 2 and prev_ch_coord_y == y:
                            if prev_ch_coord_x == 5 and x - 1 == 6 and x == 7:
                                pole[x][y] = 4
                            else:
                                pole[x][y] = 2
                            pole[x - 2][y] = 0
                            pole[x - 1][y] = 0
                            white_count -= 1
                            vivod(-1, -1)

                    if vozm_ch_zabrat_vlevo:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 2 and prev_ch_coord_y > 1 and (
                                pole[prev_ch_coord_x][prev_ch_coord_y - 1] == 1 or pole[prev_ch_coord_x][
                            prev_ch_coord_y - 1] == 3) and pole[x][y] == 0 and pole[prev_ch_coord_x][
                            prev_ch_coord_y - 2] == 0 and prev_ch_coord_x == x and prev_ch_coord_y == y + 2:
                            pole[prev_ch_coord_x][y + 2] = 0
                            pole[x][y + 1] = 0
                            pole[x][y] = 2
                            white_count -= 1
                            vivod(-1, -1)
                    if vozm_ch_zabrat_vpravo:
                        if pole[prev_ch_coord_x][prev_ch_coord_y] == 2 and prev_ch_coord_y < 6 and (
                                pole[prev_ch_coord_x][prev_ch_coord_y + 1] == 1 or pole[prev_ch_coord_x][
                            prev_ch_coord_y + 1] == 3) and pole[x][y] == 0 and pole[prev_ch_coord_x][
                            prev_ch_coord_y + 2] == 0 and prev_ch_coord_x == x and prev_ch_coord_y == y - 2:
                            pole[prev_ch_coord_x][y - 2] = 0
                            pole[x][y - 1] = 0
                            pole[x][y] = 2
                            white_count -= 1
                            vivod(-1, -1)
                    vozm_ch_zabrat = False
                    chernie_proverka()
                    if vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                        hod_igroka = True
                chernie_proverka()
                vozmozhnost_chernih_hodit(x, y)
                if black_count == 0:
                    messagebox.showinfo(title='Победа белых', message='Победили белые.', icon='info')
                    hod_igroka = None
                    Start_new()
                if vozmozhnost_chernih_shodit:
                    if (pole[prev_ch_coord_x][
                            prev_ch_coord_y] != 0 and prev_ch_coord_y + 1 == y and prev_ch_coord_x == x) or (
                            prev_ch_coord_y - 1 == y and prev_ch_coord_x == x) or (
                            prev_ch_coord_x + 1 == x and prev_ch_coord_y == y):  # Проверяем, сходили ли мы на одну клетку вертикально или горизонтально
                        if pole[x][y] == 0 and vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                            if pole[prev_ch_coord_x][prev_ch_coord_y] == 2:
                                if x == 7:
                                    pole[x][y] = 4
                                else:
                                    pole[x][y] = 2
                                pole[prev_ch_coord_x][prev_ch_coord_y] = 0
                                vivod(-1, -1)  # рисуем игровое поле
                                hod_igroka = True
                    if pole[prev_ch_coord_x][prev_ch_coord_y] == 4 and pole[x][
                        y] == 0 and vozm_ch_zabrat == False and vozm_ch_d_zabrat == False:
                        if prev_ch_coord_x > x and prev_ch_coord_y == y:
                            ch_count = 0
                            not_zero_count = 0
                            prev_x = prev_ch_coord_x
                            for k in range(prev_ch_coord_x, x, -1):
                                ch_count += 1
                                if pole[prev_ch_coord_x][y] != 0:
                                    not_zero_count += 1
                                prev_ch_coord_x -= 1
                            if not_zero_count == 1:
                                pole[x][y] = 4
                                pole[prev_x][prev_ch_coord_y] = 0
                                vivod(-1, -1)
                                hod_igroka = True
                        if prev_ch_coord_x < x and prev_ch_coord_y == y:
                            ch_count = 0
                            not_zero_count = 0
                            prev_x = prev_ch_coord_x
                            for k in range(prev_ch_coord_x, x):
                                ch_count += 1
                                if pole[prev_ch_coord_x][y] != 0:
                                    not_zero_count += 1
                                prev_ch_coord_x += 1
                            if not_zero_count == 1:
                                pole[x][y] = 4
                                pole[prev_x][prev_ch_coord_y] = 0
                                vivod(-1, -1)
                                hod_igroka = True
                        if prev_ch_coord_y > y and prev_ch_coord_x == x:
                            ch_count = 0
                            not_zero_count = 0
                            prev_y = prev_ch_coord_y
                            for k in range(prev_ch_coord_y, y, -1):
                                ch_count += 1
                                if pole[x][prev_ch_coord_y] != 0:
                                    not_zero_count += 1
                                prev_ch_coord_y -= 1
                            if not_zero_count == 1:
                                pole[x][y] = 4
                                pole[prev_ch_coord_x][prev_y] = 0
                                vivod(-1, -1)
                                hod_igroka = True
                        if prev_ch_coord_y < y and prev_ch_coord_x == x:
                            ch_count = 0
                            not_zero_count = 0
                            prev_y = prev_ch_coord_y
                            for k in range(prev_ch_coord_y, y):
                                ch_count += 1
                                if pole[x][prev_ch_coord_y] != 0:
                                    not_zero_count += 1
                                prev_ch_coord_y += 1
                            if not_zero_count == 1:
                                pole[x][y] = 4
                                pole[prev_ch_coord_x][prev_y] = 0
                                vivod(-1, -1)
                                hod_igroka = True

        izobrazheniya_figur()  # здесь загружаем изображения пешек
        novaya_igra()  # начинаем новую игру
        vivod(-1, -1)  # рисуем игровое поле
        board.bind("<Button-1>", click_event)  # нажатие левой кнопки

        mainloop()

    def OpenClick1(self):
        text = self.lineEdit_2.text().replace(' ', '\n')
        file1 = open("forform2.txt", 'w+')
        file1.write(text + '\n')
        file1.close()
        file = open("forform2.txt", 'r')
        f = file.readlines()
        file.close()
        cnt = 0
        file3 = open("forform3.txt", 'w+')
        for i in f:
            if len(i.strip()) % 2 != 0:
                cnt += 1
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Error")
                msg.setInformativeText('The length of each word or number must be even!')
                msg.setWindowTitle("Error")
                msg.exec_()
            else:
                n = i.strip()
                code = n
                shifr = []

                # firstkey = "ABROK"
                # secondkey = "MODEL"

                A1 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                      'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                      'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                      'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                      'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                      'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                      'w', 'x', 'y', 'z', '1', '2', '3', '4',
                      '5', '6', '7', '8', '9', '0', '-', '_']

                A, B, C, D = [], [], [], []

                for i in range(8):
                    A.append([0] * 8)
                    B.append([0] * 8)
                    C.append([0] * 8)
                    D.append([0] * 8)

                n = 0
                for i in range(8):
                    for j in range(8):
                        A[i][j] = A1[n]
                        n += 1
                D = A

                B1 = ['B', 'U', 'j', 't', '2', '5', '0', '-',
                      'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                      'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
                      'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
                      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
                      'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                      'r', 's', 'u', 'v', 'w', 'x', 'y', 'z',
                      '1', '3', '4', '6', '7', '8', '9', '_', ]

                n1 = 0
                for i in range(8):
                    for j in range(8):
                        B[i][j] = B1[n1]
                        n1 += 1

                C1 = ['O', 'Q', 'r', 'x', 'B', '_', '0', '7',
                      'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                      'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S',
                      'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',
                      'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                      'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                      's', 't', 'u', 'v', 'w', 'y', 'z', '1',
                      '2', '3', '4', '5', '6', '8', '9', '-']

                n2 = 0
                for i in range(8):
                    for j in range(8):
                        C[i][j] = C1[n2]
                        n2 += 1
                for b in range(0, len(code), 2):
                    bukva1 = code[b]
                    bukva2 = code[b + 1]
                    for i in range(8):
                        for j in range(8):
                            if A[i][j] == bukva1:
                                for s in range(8):
                                    for t in range(8):
                                        if D[s][t] == bukva2:
                                            shifr.append(B[i][t])
                                            shifr.append(C[s][j])
                vvtext = ''.join(map(str, shifr))
                file3.write(vvtext + '\n')
        file3.close()

        file4 = open("forform3.txt", 'r')

        text1 = file4.read().replace('\n', ' ')
        if cnt == 0:
            self.lineEdit.setText(text1)


    def np(self):
        Form3.show()
        Form.close()

class Ui_Form3(object):
    def setupUi(self, Form3):
        Form3.setObjectName("Form3")
        Form3.resize(380, 223)
        self.widget = QtWidgets.QWidget(Form3)
        self.widget.setGeometry(QtCore.QRect(80, 60, 231, 101))
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout)

        self.retranslateUi(Form3)
        QtCore.QMetaObject.connectSlotsByName(Form3)

    def retranslateUi(self, Form3):
        _translate = QtCore.QCoreApplication.translate
        Form3.setWindowTitle(_translate("Form3", "Form"))
        self.label.setText(_translate("Form3", "Deciphered text"))
        self.pushButton_2.setText(_translate("Form3", "Decipher"))
        self.pushButton.setText(_translate("Form3", "Exit"))

        self.pushButton.clicked.connect(self.Exit1)
        self.pushButton_2.clicked.connect(self.OpenClick3)

    def OpenClick3(self):
        file = open("forform2.txt", 'r')
        f = file.readlines()
        text = ""
        for i in f:
            text += i.strip() + '\n'
        self.lineEdit.setText(text)

    def Exit1(self):
        Form1.show()
        Form3.close()
class Ui_Form1(object):
    def setupUi(self, Form1):
        Form1.setObjectName("Form1")
        Form1.resize(383, 182)
        self.layoutWidget = QtWidgets.QWidget(Form1)
        self.layoutWidget.setGeometry(QtCore.QRect(100, 110, 191, 25))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.label = QtWidgets.QLabel(Form1)
        self.label.setGeometry(QtCore.QRect(90, 40, 221, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")

        self.retranslateUi(Form1)
        QtCore.QMetaObject.connectSlotsByName(Form1)

    def retranslateUi(self, Form1):
        _translate = QtCore.QCoreApplication.translate
        Form1.setWindowTitle(_translate("Form1", "Form"))
        self.pushButton.setText(_translate("Form1", "To main page"))
        self.pushButton_2.setText(_translate("Form1", "Exit"))
        self.label.setText(_translate("Form1", "Do you really want to leave?"))

        self.pushButton.clicked.connect(self.OpenClick2)
        self.pushButton_2.clicked.connect(sys.exit)

    def OpenClick2(self):
        MainWindow.show()
        Form1.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    Form = QtWidgets.QWidget()
    Form1 = QtWidgets.QWidget()
    Form3 = QtWidgets.QWidget()
    ui = Ui_MainWindow()
    pi = Ui_Form()
    ri = Ui_Form1()
    yi = Ui_Form3()
    ui.setupUi(MainWindow)
    pi.setupUi(Form)
    ri.setupUi(Form1)
    yi.setupUi(Form3)
    MainWindow.show()
    sys.exit(app.exec_())